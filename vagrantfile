# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
    config.vm.box = "ubuntu/bionic64"


  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 8F0 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  #config.vm.network "private_network", ip: "192.168.33.22"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "dev", "/home/vagrant/dev"

  config.vm.provision "shell", path: "scripts/installer.sh", privileged: true, binary: false

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #


  ### KAFKA
    config.ssh.forward_agent = true # So that boxes don't have to setup key-less ssh
    config.ssh.insert_key = false # To generate a new ssh key and don't use the default Vagrant one

    vars = {
       "KAFKA_VERSION" => "1.1.0",
       "KAFKA_NAME" => "kafka_2.11-$KAFKA_VERSION",
       "KAFKA_TARGET" => "/vagrant/tars/",
       "KAFKA_HOME" => "$HOME/$KAFKA_NAME"
    }

    # escape environment variables to be loaded to /etc/profile.d/
    as_str = vars.map{|k,str| ["export #{k}=#{str.gsub '$', '\$'}"] }.join("\n")

    # common provisioning for all
    config.vm.provision "shell", path: "scripts/hostsFileSetup.sh", env: vars
    config.vm.provision "shell", inline: "echo \"#{as_str}\" > /etc/profile.d/kafka_vagrant_env.sh", run: "always"
    config.vm.provision "shell", path: "scripts/init.sh", env: vars

    # configure zookeeper cluster
    (1..3).each do |i|
      config.vm.define "zookeeper#{i}" do |s|
        s.vm.hostname = "zookeeper#{i}"
        s.vm.network "private_network", ip: "10.30.3.#{i+1}"
        #s.vm.network "private_network", ip: "10.30.3.#{i+1}", netmask: "255.255.255.0", virtualbox__intnet: "my-network", drop_nat_interface_default_route: true
        s.vm.provision "shell", run: "always", path: "scripts/zookeeper.sh", args:"#{i}", privileged: false, env: vars
      end
    end

    # configure brokers
    (1..3).each do |i|
      config.vm.define "broker#{i}" do |s|
        s.vm.hostname = "broker#{i}"
        s.vm.network "private_network", ip: "10.30.3.#{4-i}0"
        #s.vm.network "private_network", ip: "10.30.3.#{4-i}0", netmask: "255.255.255.0", virtualbox__intnet: "my-network", drop_nat_interface_default_route: true
        s.vm.provision "shell", run: "always", path: "scripts/broker.sh", args:"#{i}", privileged: false, env: vars
      end
    end

    config.vm.provider "virtualbox" do |v|
      #  This setting controls how much cpu time a virtual CPU can use. A value of 50 implies a single virtual CPU can use up to 50% of a single host CPU.
      v.customize ["modifyvm", :id, "--cpuexecutioncap", "50"]
    end
end
